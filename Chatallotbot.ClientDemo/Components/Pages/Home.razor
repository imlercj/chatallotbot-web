@page "/"
@using Chatallotbot.ClientDemo.Extensions
@using Chatallotbot.Server.Chat
@inject IJSRuntime JsRuntime

<PageTitle>Chat</PageTitle>

<h1>Chatallotbot demo chat</h1>
<p style="font-size:small"><b>Total Tokens:</b> @_totalTokens</p>
<div id="chatcontainer" style="height:550px; width:80%; overflow: scroll;">
    @foreach (var item in _chatMessages)
    { 
        <div>
            @if (item.Role == "User")
            {
                <div style="float: right; margin-right: 20px; margin-top: 10px">
                    <b>Human</b>
                </div>
                <div class="@item.Role">
                    <div class="msg">
                        @item.Content
                    </div>
                </div>
            }
            @if (item.Role == "Assistant")
            {
                <div style="float: left; margin-left: 20px; margin-top: 10px">
                    <b>ChatGPT&nbsp;&nbsp;</b>
                </div>
                <div class="@item.Role">
                    <div class="msg">
                        @if (!string.IsNullOrEmpty(item.Content))
                        {
                            @((MarkupString)item.Content.ToHtml())
                        }
                    </div>
                </div>
            }
        </div>
    } 
</div>
@if (!_processing)
{
    <textarea rows="3" cols="60" @bind="_prompt"></textarea>
    <br />
    <button class="btn btn-info"
            @onclick="RestartChat">
        Restart
    </button>
    <span>&nbsp;</span>
    <button class="btn btn-primary" @onclick="SendMessage">
        Send
    </button>
}
else
{
    <br>
    <h4>Processing...</h4>
}
<br /><p style="color:red">@_errorMessage</p>

@code{
    string _prompt = "";
    string _errorMessage = "";
    bool _processing;
    long _totalTokens;

    private List<ChatMessageDto> _chatMessages = [];
    
    protected override void OnInitialized()
    {
        InitializeChat();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeAsync<string>(
                "ScrollToBottom", "chatcontainer"
            );
        }
        catch
        {
            // do nothing if this fails
        }
    }
    
    private async Task SendMessage()
    {
        Console.WriteLine("Sending message: " + _prompt);
        try
        {
            _processing = true;
            _errorMessage = "";
            StateHasChanged();
            
            _chatMessages.Add(new ChatMessageDto("User", _prompt));

            var httpClient = new HttpClient();
            var jsonContent = System.Text.Json.JsonSerializer.Serialize(_chatMessages);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

            var httpResponse = await httpClient.PostAsync(new Uri("http://localhost:5073/api/chat"), content);

            if (!httpResponse.IsSuccessStatusCode)
                throw new Exception($"{httpResponse.StatusCode} - {httpResponse.ReasonPhrase}");
            
            var stringContent = await httpResponse.Content.ReadAsStringAsync();
            var response = System.Text.Json.JsonSerializer.Deserialize<ChatResponse>(stringContent);
            if (response is null)
                throw new NullReferenceException("Empty chat response");

            _chatMessages = response.Chat;
          
            _totalTokens += response.TotalTokens;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _prompt = "";
            _processing = false;
            StateHasChanged();
        }
    }
    
    private void RestartChat()
    {
        _chatMessages.Clear();
        _errorMessage = "";
        _totalTokens = 0;
        InitializeChat();
    }
    
    private void InitializeChat()
    {
        _prompt = "Write a 10 word description of Azure OpenAI";
        var systemMessage = "You are helpful Assistant.";
        systemMessage += "You will always reply with a Markdown formatted response.";
        _chatMessages.Add(new ChatMessageDto("System", systemMessage));
        StateHasChanged();
    }
}