@using System.Net.Http.Json
@using System.Text.Json
@using Chatallotbot.Server.Chat
@inject IConfiguration Configuration
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<div class="chat-widget @(_isOpen ? "open" : "closed")">
    <div class="chat-header" @onclick="ToggleChat">
        <span>Chat Assistant</span>
        <span class="chat-toggle">@(_isOpen ? "Ã—" : "+")</span>
    </div>
    
    @if (_isOpen)
    {
        <div class="chat-body">
            <div class="chat-messages" id="chat-messages">
                @foreach (var message in _chatMessages)
                {
                    <div class="message @message.Role.ToString().ToLowerInvariant()">
                        <p>@message.Content</p>
                    </div>
                }
            </div>
            <div class="chat-input">
                <textarea @bind="_currentMessage" 
                          @onkeydown="@HandleKeyPress"
                          placeholder="Type your message..."></textarea>
                <button @onclick="SendMessage" disabled="@_isSending">
                    @if (_isSending)
                    {
                        <span>Sending...</span>
                    }
                    else
                    {
                        <span>Send</span>
                    }
                </button>
            </div>
        </div>
    }
</div>

@code {
    private bool _isOpen;
    private bool _isSending;
    private string _currentMessage = "";
    private List<ChatMessageDto> _chatMessages = [];

    protected override void OnInitialized()
    {
        // Add welcome message
        _chatMessages.Add(new ChatMessageDto
        {
            Role = ChatRoleDto.Assistant,
            Content = "Hi! How can I help you today?"
        });
    }

    private void ToggleChat() => _isOpen = !_isOpen;

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
            await SendMessage();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessage) || _isSending)
            return;

        _isSending = true;

        try
        {
            // Add user message to chat
            _chatMessages.Add(new ChatMessageDto
            {
                Role = ChatRoleDto.User,
                Content = _currentMessage
            });

            // Prepare HTTP client with API key
            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("X-API-Key", Configuration["ApiKey"]);

            // Send to server
            var response = await Http.PostAsJsonAsync("chat", _chatMessages);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (result != null)
                {
                    _chatMessages = result.ChatMessages;
                }
            }
            else
            {
                // Handle error
                _chatMessages.Add(new ChatMessageDto
                {
                    Role = ChatRoleDto.Assistant,
                    Content = "Sorry, I couldn't process your request."
                });
            }

            _currentMessage = "";
        }
        catch (Exception ex)
        {
            _chatMessages.Add(new ChatMessageDto
            {
                Role = ChatRoleDto.Assistant,
                Content = $"Error: {ex.Message}"
            });
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
            
            // Scroll to bottom after UI updates
            await Task.Delay(100);
            await JsRuntime.InvokeVoidAsync("scrollChatToBottom", "chat-messages");
        }
    }
}